import os
import psycopg2
from google.cloud import bigquery, firestore
from dotenv import load_dotenv
from datetime import datetime

# Carregar vari√°veis
load_dotenv()

print("üîç Testando consultas nos 3 bancos de dados...")
print("=" * 60)

# 1. POSTGRESQL - Consulta Operacional
print("\n1Ô∏è‚É£ POSTGRESQL - Motoristas e seus sal√°rios") # -- MODIFICADO --
print("-" * 40)

try:
    conn = psycopg2.connect(
        host=os.getenv('POSTGRES_HOST'),
        user=os.getenv('POSTGRES_USER'),
        password=os.getenv('POSTGRES_PASS'),
        database=os.getenv('POSTGRES_DB')
    )
    cur = conn.cursor()
    
    # -- QUERY MODIFICADA --
    query = """
    SELECT nome, salario
    FROM motoristas
    ORDER BY salario DESC
    LIMIT 5
    """
    
    cur.execute(query)
    results = cur.fetchall()
    
    for row in results:
        print(f"  - {row[0]} - Sal√°rio: R$ {row[1]:,.2f}")
    
    cur.close()
    conn.close()
    
except Exception as e:
    print(f"‚ùå Erro PostgreSQL: {e}")

# 2. BIGQUERY - Consulta Anal√≠tica
print("\n2Ô∏è‚É£ BIGQUERY - Desempenho dos motoristas com mais KM") # -- MODIFICADO --
print("-" * 40)

try:
    os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = 'credentials.json'
    client = bigquery.Client(project='trabalho-final-bd-463916')
    
    # -- QUERY MODIFICADA para usar a nova view --
    query = """
    SELECT 
        nome,
        total_viagens,
        km_total
    FROM `trabalho-final-bd-463916.frota_dw.desempenho_por_motorista`
    WHERE km_total > 0
    ORDER BY km_total DESC
    LIMIT 5
    """
    
    df = client.query(query).to_dataframe()
    
    for _, row in df.iterrows():
        print(f"  - {row['nome']}: {row['total_viagens']} viagens, {row['km_total']:,} km rodados")
    
except Exception as e:
    print(f"‚ùå Erro BigQuery: {e}")

# 3. FIRESTORE - Consulta Tempo Real
print("\n3Ô∏è‚É£ FIRESTORE - Ve√≠culos em viagem e seus motoristas") # -- MODIFICADO --
print("-" * 40)

try:
    db = firestore.Client(project='trabalho-final-bd-463916')
    
    # -- QUERY MODIFICADA --
    query = db.collection('veiculos_status') \
        .where('status', '==', 'Em viagem') \
        .limit(5)
    
    count = 0
    for doc in query.stream():
        data = doc.to_dict()
        viagem_info = data.get('viagem_atual', {})
        motorista = viagem_info.get('motorista_nome', 'N/A')
        destino = viagem_info.get('destino', 'N/A')
        print(f"  - Ve√≠culo {data['placa']} com motorista {motorista} a caminho de {destino}")
        count += 1
    
    if count == 0:
        print("  Nenhum ve√≠culo em viagem encontrado.")
    
except Exception as e:
    print(f"‚ùå Erro Firestore: {e}")

# ... (o resto do arquivo permanece o mesmo)
# 4. CONSULTA INTEGRADA - Vis√£o 360¬∞
# print("\n4Ô∏è‚É£ CONSULTA INTEGRADA - Status completo da frota")
# print("-" * 40)

# try:
#     # Firestore - M√©tricas gerais
#     db = firestore.Client(project='trabalho-final-bd-463916')
#     metricas = db.collection('metricas_tempo_real').document('dashboard').get().to_dict()
    
#     print(f"üìä Status Geral da Frota:")
#     print(f"  ‚Ä¢ Total de ve√≠culos: {metricas['frota_total']}")
#     print(f"  ‚Ä¢ Total de motoristas: {metricas.get('motoristas_total', 'N/A')}") # -- ADICIONADO --
#     print(f"  ‚Ä¢ Dispon√≠veis: {metricas['veiculos_disponiveis']}")
#     print(f"  ‚Ä¢ Em viagem: {metricas['veiculos_em_viagem']}")
#     print(f"  ‚Ä¢ Em manuten√ß√£o: {metricas['veiculos_manutencao']}")
#     print(f"  ‚Ä¢ Efici√™ncia: {metricas['eficiencia_frota']}%")
#     print(f"  ‚Ä¢ Alertas ativos: {metricas['alertas_ativos']['total']}")
    
#     # BigQuery - Custo total do m√™s atual
#     client = bigquery.Client(project='trabalho-final-bd-463916')
#     mes_atual = datetime.now().strftime('%Y-%m')
    
#     query = f"""
#     SELECT custo_total, km_total
#     FROM `trabalho-final-bd-463916.frota_dw.resumo_mensal`
#     WHERE mes = '{mes_atual}'
#     """
    
    # df = client.query(query).to_dataframe()
    # if not df.empty:
    #     print(f"\nüí∞ Custos do m√™s atual ({mes_atual}):")
    #     print(f"  ‚Ä¢ Total gasto: R$ {df.iloc[0]['custo_total']:,.2f}")
    #     print(f"  ‚Ä¢ KM rodados: {df.iloc[0]['km_total']:,}")
    
except Exception as e:
    print(f"‚ùå Erro na consulta integrada: {e}")

print("\n" + "=" * 60)
print("‚úÖ Testes conclu√≠dos!")